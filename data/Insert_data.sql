-- Insert error categories first
INSERT INTO error_categories (category_code, name_en, name_zh, description_en, description_zh, sort_order) VALUES
('logical', 'Logical Errors', '邏輯錯誤', 'Errors in program logic and flow control', '程式邏輯和流程控制錯誤', 1),
('syntax', 'Syntax Errors', '語法錯誤', 'Basic syntax and formatting issues', '基本語法和格式問題', 2),
('code_quality', 'Code Quality', '程式碼品質', 'Code maintainability and readability issues', '程式碼維護性和可讀性問題', 3),
('standard_violation', 'Standard Violation', '標準違規', 'Violations of Java coding standards', 'Java編程標準違規', 4),
('java_specific', 'Java Specific', 'Java特定錯誤', 'Java language specific errors and best practices', 'Java語言特定錯誤和最佳實踐', 5);

-- Insert Java errors (comprehensive set from JSON data)
INSERT INTO java_errors (
    error_code, category_id,
    error_name_en, description_en, implementation_guide_en,
    error_name_zh, description_zh, implementation_guide_zh,
    difficulty_level, frequency_weight, tags, examples
) VALUES
-- Logical Errors
('logical_off_by_one', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Off-by-one error', 
 'An iteration error where a loop iterates one time too many or too few, often in array indexing or boundary conditions.',
 'Use a for loop with incorrect boundaries like ''for(int i=0; i<=array.length; i++)'' instead of ''for(int i=0; i<array.length; i++)'', or use ''<'' when you need ''<=''.',
 '離一錯誤',
 '迴圈多或少執行一次的錯誤，常見於陣列索引或邊界條件。',
 '使用錯誤邊界的for迴圈，如''for(int i=0; i<=array.length; i++)''而非''for(int i=0; i<array.length; i++)''。',
 'medium', 4, 
 '["loops", "arrays", "indexing", "boundaries"]',
 '[{"wrong": "for(int i=0; i<=array.length; i++)", "correct": "for(int i=0; i<array.length; i++)"}]'),

('logical_null_check_after_dereference', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Null check after dereference',
 'Accessing an object''s methods or fields before checking if it''s null.',
 'Write code that uses an object and then checks if it''s null: ''if(object.getValue() > 0 && object != null)'' which causes NullPointerException if object is null.',
 '解引用後檢查null',
 '在檢查物件是否為null之前存取其方法或欄位。',
 '編寫先使用物件再檢查null的程式碼：''if(object.getValue() > 0 && object != null)''，若object為null會導致異常。',
 'medium', 5,
 '["null", "safety", "exceptions"]',
 '[{"wrong": "if(object.getValue() > 0 && object != null)", "correct": "if(object != null && object.getValue() > 0)"}]'),

('logical_unintended_integer_division', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Unintended integer division',
 'Integer division that truncates decimal results when floating-point division was intended.',
 'Divide two integers where decimal precision is needed: ''double result = 5 / 2;'' gives 2.0 instead of 2.5.',
 '意外的整數除法',
 '當需要浮點數除法時，整數除法會截斷小數結果。',
 '在需要小數精度時除以兩個整數：''double result = 5 / 2;''得到2.0而非2.5。',
 'medium', 4,
 '["division", "casting", "precision"]',
 '[{"wrong": "double result = 5 / 2;", "correct": "double result = 5.0 / 2;"}]'),

('logical_ignoring_return_values', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Ignoring method return values',
 'Not checking or using the return value of a method, especially for methods that return status or modified values.',
 'Call string.replace() without assigning the result: ''myString.replace("old", "new");'' instead of ''myString = myString.replace("old", "new");''',
 '忽略方法回傳值',
 '未檢查或使用方法的回傳值，特別是回傳狀態或修改值的方法。',
 '呼叫string.replace()但未指派結果：''myString.replace("old", "new");''而非''myString = myString.replace("old", "new");''',
 'medium', 3,
 '["return-values", "immutable", "strings"]',
 '[{"wrong": "myString.replace(\\"old\\", \\"new\\");", "correct": "myString = myString.replace(\\"old\\", \\"new\\");"}]'),

('logical_incorrect_equals_hashcode', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Incorrect equals/hashCode implementation',
 'Overriding equals() without overriding hashCode() or implementing them inconsistently.',
 'Override only equals() method without hashCode(), or use different fields in equals() and hashCode() implementations.',
 '錯誤的equals/hashCode實作',
 '覆寫equals()而未覆寫hashCode()，或實作不一致。',
 '只覆寫equals()方法而未覆寫hashCode()，或在equals()和hashCode()中使用不同欄位。',
 'hard', 2,
 '["equals", "hashCode", "contracts"]',
 '[{"advice": "Always override both equals() and hashCode() together"}]'),

('logical_short_circuit_misunderstanding', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Misunderstanding of short-circuit evaluation',
 'Not utilizing or misunderstanding how && and || short-circuit, leading to potential errors or inefficient code.',
 'Use ''&'' or ''|'' instead of ''&&'' or ''||'' when short-circuiting is needed to prevent NullPointerException: ''if(obj != null & obj.getValue() > 0)''',
 '短路求值的誤解',
 '未利用或誤解&&和||的短路特性，導致潛在錯誤或低效程式碼。',
 '當需要短路來防止NullPointerException時使用''&''或''|''而非''&&''或''||''：''if(obj != null & obj.getValue() > 0)''',
 'hard', 2,
 '["short-circuit", "operators", "evaluation"]',
 '[{"wrong": "if(obj != null & obj.getValue() > 0)", "correct": "if(obj != null && obj.getValue() > 0)"}]'),

('logical_race_conditions', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Race conditions in multi-threaded code',
 'Incorrect synchronization leading to unpredictable behavior when multiple threads access shared resources.',
 'Access shared variables without proper synchronization or locks, or use non-atomic operations in concurrent contexts.',
 '多執行緒程式碼中的競爭條件',
 '不正確的同步導致多個執行緒存取共享資源時行為不可預測。',
 '在沒有適當同步或鎖的情況下存取共享變數，或在併發上下文中使用非原子操作。',
 'hard', 1,
 '["threading", "synchronization", "concurrency"]',
 '[{"advice": "Use synchronized blocks, locks, or atomic operations for shared data"}]'),

('logical_string_comparison_with_equals', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'String comparison using ==',
 'Comparing String objects with == instead of the equals() method.',
 'Compare strings with == instead of equals(): ''if(str1 == str2)'' instead of ''if(str1.equals(str2))''',
 '使用==比較字串',
 '使用==而非equals()方法比較String物件。',
 '使用==而非equals()比較字串：''if(str1 == str2)''而非''if(str1.equals(str2))''',
 'easy', 5,
 '["strings", "equals", "comparison"]',
 '[{"wrong": "if(str1 == str2)", "correct": "if(str1.equals(str2))"}]'),

('logical_side_effects_in_assertions', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Side effects in assertions',
 'Including operations with side effects in assertions, which may not execute when assertions are disabled.',
 'Write assertions that modify state: ''assert (x = calculateValue()) > 0;'' where x is being assigned a value.',
 '斷言中的副作用',
 '在斷言中包含有副作用的操作，當斷言被禁用時可能不會執行。',
 '編寫修改狀態的斷言：''assert (x = calculateValue()) > 0;''其中x被賦值。',
 'medium', 1,
 '["assertions", "side-effects", "debugging"]',
 '[{"wrong": "assert (x = calculateValue()) > 0;", "correct": "x = calculateValue(); assert x > 0;"}]'),

('logical_missing_break_in_switch', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Missing break in switch statements',
 'Forgetting break statements in switch cases, causing unintended fall-through to subsequent cases.',
 'Create a switch statement without break statements between cases, leading to execution of multiple case blocks.',
 'switch語句中缺少break',
 '忘記在switch case中加break語句，導致意外地繼續執行後續case。',
 '建立沒有break語句的switch語句，導致執行多個case區塊。',
 'medium', 3,
 '["switch", "break", "fall-through"]',
 '[{"advice": "Always include break statements unless fall-through is intentional"}]'),

('logical_assignment_instead_of_comparison', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Using assignment instead of comparison',
 'Using = (assignment) instead of == (comparison) in a conditional statement.',
 'Use assignment in condition: ''if(x = 5)'' instead of ''if(x == 5)'', which assigns 5 to x and then evaluates to true.',
 '使用賦值而非比較',
 '在條件語句中使用=（賦值）而非==（比較）。',
 '在條件中使用賦值：''if(x = 5)''而非''if(x == 5)''，會將5賦值給x然後求值為true。',
 'easy', 4,
 '["assignment", "comparison", "operators"]',
 '[{"wrong": "if(x = 5)", "correct": "if(x == 5)"}]'),

('logical_operator_precedence', 
 (SELECT id FROM error_categories WHERE category_code = 'logical'),
 'Order of operations misunderstanding',
 'Incorrect assumptions about operator precedence leading to unexpected calculation results.',
 'Write expressions without parentheses where the order of operations matters: ''a + b * c'' expecting (a + b) * c.',
 '運算順序誤解',
 '對運算子優先順序的錯誤假設導致意外的計算結果。',
 '編寫沒有括號但運算順序很重要的表達式：''a + b * c''期望(a + b) * c。',
 'medium', 3,
 '["precedence", "operators", "parentheses"]',
 '[{"wrong": "a + b * c", "correct": "(a + b) * c"}]'),

-- Syntax Errors
('syntax_missing_semicolon', 
 (SELECT id FROM error_categories WHERE category_code = 'syntax'),
 'Missing semicolons',
 'Forgetting to terminate statements with semicolons, causing compilation errors.',
 'Omit semicolons at the end of statements: ''int x = 5'' instead of ''int x = 5;''',
 '缺少分號',
 '忘記用分號終止語句，導致編譯錯誤。',
 '在語句末尾省略分號：''int x = 5''而非''int x = 5;''',
 'easy', 5,
 '["semicolon", "syntax", "compilation"]',
 '[{"wrong": "int x = 5", "correct": "int x = 5;"}]'),

('syntax_unbalanced_brackets', 
 (SELECT id FROM error_categories WHERE category_code = 'syntax'),
 'Unbalanced brackets or parentheses',
 'Having mismatched opening and closing brackets, braces, or parentheses in code.',
 'Create code with unbalanced brackets: ''if (condition) { doSomething();'' without the closing brace.',
 '括號不平衡',
 '程式碼中的開括號和閉括號、大括號或圓括號不匹配。',
 '建立括號不平衡的程式碼：''if (condition) { doSomething();''沒有閉括號。',
 'easy', 4,
 '["brackets", "braces", "parentheses"]',
 '[{"wrong": "if (condition) { doSomething();", "correct": "if (condition) { doSomething(); }"}]'),

('syntax_incorrect_method_declaration', 
 (SELECT id FROM error_categories WHERE category_code = 'syntax'),
 'Incorrect method declaration',
 'Syntax errors in method declarations, such as missing return types or incorrect modifiers.',
 'Declare a method without a return type: ''public calculateTotal(int x, int y) { return x + y; }'' instead of ''public int calculateTotal(int x, int y) { return x + y; }''',
 '錯誤的方法宣告',
 '方法宣告中的語法錯誤，如缺少回傳型別或錯誤的修飾符。',
 '宣告沒有回傳型別的方法：''public calculateTotal(int x, int y) { return x + y; }''而非''public int calculateTotal(int x, int y) { return x + y; }''',
 'medium', 3,
 '["methods", "declaration", "return-type"]',
 '[{"wrong": "public calculateTotal(int x, int y)", "correct": "public int calculateTotal(int x, int y)"}]'),

('syntax_invalid_variable_declarations', 
 (SELECT id FROM error_categories WHERE category_code = 'syntax'),
 'Invalid variable declarations',
 'Syntax errors in variable declarations, such as missing types or invalid identifiers.',
 'Declare variables with invalid syntax: ''int 2count = 10;'' using identifiers that start with numbers, or ''count = 5;'' without specifying type for a new variable.',
 '無效的變數宣告',
 '變數宣告中的語法錯誤，如缺少型別或無效識別符。',
 '使用無效語法宣告變數：''int 2count = 10;''使用以數字開頭的識別符，或''count = 5;''未指定新變數的型別。',
 'easy', 4,
 '["variables", "declaration", "identifiers"]',
 '[{"wrong": "int 2count = 10;", "correct": "int count2 = 10;"}]'),

('syntax_type_mismatch_assignment', 
 (SELECT id FROM error_categories WHERE category_code = 'syntax'),
 'Type mismatch in assignment',
 'Assigning values of incompatible types without proper casting.',
 'Assign incompatible types without casting: ''int x = "Hello";'' or ''String s = 42;''',
 '賦值中的型別不匹配',
 '在沒有適當轉型的情況下賦值不相容的型別。',
 '不經轉型賦值不相容型別：''int x = "Hello";''或''String s = 42;''',
 'easy', 4,
 '["types", "assignment", "casting"]',
 '[{"wrong": "int x = \\"Hello\\";", "correct": "String x = \\"Hello\\";"}]'),

('syntax_keywords_as_identifiers', 
 (SELECT id FROM error_categories WHERE category_code = 'syntax'),
 'Using keywords as identifiers',
 'Attempting to use Java reserved keywords as variable, method, or class names.',
 'Try to use reserved words as identifiers: ''int class = 10;'' or ''void public() { }''.',
 '使用關鍵字作為識別符',
 '嘗試將Java保留關鍵字用作變數、方法或類名。',
 '嘗試使用保留字作為識別符：''int class = 10;''或''void public() { }''。',
 'easy', 3,
 '["keywords", "identifiers", "reserved"]',
 '[{"wrong": "int class = 10;", "correct": "int className = 10;"}]'),

('syntax_missing_return_statement', 
 (SELECT id FROM error_categories WHERE category_code = 'syntax'),
 'Missing return statement',
 'Not providing a return statement in a method that declares a return type.',
 'Create a non-void method without a return statement: ''public int getValue() { int x = 10; }'' without returning x.',
 '缺少return語句',
 '在宣告回傳型別的方法中未提供return語句。',
 '建立沒有return語句的非void方法：''public int getValue() { int x = 10; }''沒有回傳x。',
 'easy', 4,
 '["return", "methods", "compilation"]',
 '[{"wrong": "public int getValue() { int x = 10; }", "correct": "public int getValue() { int x = 10; return x; }"}]'),

('syntax_illegal_modifiers', 
 (SELECT id FROM error_categories WHERE category_code = 'syntax'),
 'Illegal modifiers',
 'Using incompatible or redundant modifiers for classes, methods, or variables.',
 'Use conflicting modifiers: ''private public void method()'' or ''final abstract class MyClass''.',
 '非法修飾符',
 '對類、方法或變數使用不相容或冗餘的修飾符。',
 '使用衝突的修飾符：''private public void method()''或''final abstract class MyClass''。',
 'medium', 2,
 '["modifiers", "access", "compilation"]',
 '[{"wrong": "private public void method()", "correct": "public void method()"}]'),

-- Code Quality Issues  
('code_quality_magic_numbers', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Magic numbers',
 'Using literal numbers in code instead of named constants, reducing readability and maintainability.',
 'Hardcode numeric values: ''if(count > 1000)'' or ''for(int i=0; i<365; i++)'' instead of using named constants.',
 '魔術數字',
 '在程式碼中使用字面數字而非具名常數，降低可讀性和維護性。',
 '硬編碼數值：''if(count > 1000)''或''for(int i=0; i<365; i++)''而非使用具名常數。',
 'easy', 4,
 '["constants", "readability", "maintainability"]',
 '[{"wrong": "if(count > 1000)", "correct": "private static final int MAX_COUNT = 1000; if(count > MAX_COUNT)"}]'),

('code_quality_long_method', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Long method',
 'Methods that are excessively long and try to do too many things, violating the Single Responsibility Principle.',
 'Create methods with more than 50 lines that perform multiple responsibilities instead of breaking them into smaller, focused methods.',
 '過長的方法',
 '過長且承擔過多責任的方法，違反單一職責原則。',
 '建立超過50行且執行多項職責的方法，而非將其拆分為更小、專注的方法。',
 'medium', 3,
 '["methods", "single-responsibility", "refactoring"]',
 '[{"advice": "Break methods longer than 20-30 lines into smaller methods"}]'),

('code_quality_code_duplication', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Code duplication',
 'Repeated code blocks that could be refactored into shared methods or utilities.',
 'Copy-paste similar logic in multiple places instead of extracting common logic into separate methods.',
 '程式碼重複',
 '重複的程式碼區塊，可以重構為共享方法或工具。',
 '在多個地方複製貼上相似邏輯，而非將共通邏輯提取到獨立方法中。',
 'medium', 4,
 '["duplication", "refactoring", "dry"]',
 '[{"advice": "Extract common logic into reusable methods"}]'),

('code_quality_deep_nesting', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Deep nesting',
 'Excessive levels of nested conditionals or loops, making code hard to read and maintain.',
 'Create deeply nested if-else statements or loops with 4+ levels of indentation instead of using early returns or extracted methods.',
 '過深巢狀',
 '過多層級的巢狀條件或迴圈，使程式碼難以閱讀和維護。',
 '建立深度巢狀的if-else語句或4+層縮排的迴圈，而非使用早期回傳或提取方法。',
 'medium', 3,
 '["nesting", "readability", "complexity"]',
 '[{"advice": "Use early returns and extract methods to reduce nesting"}]'),

('code_quality_poor_exception_handling', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Poor exception handling',
 'Catching exceptions that are too broad or empty catch blocks that swallow exceptions without proper handling.',
 'Use catch(Exception e) {} with empty body, hiding all errors, or catch overly broad exceptions without specific handling.',
 '糟糕的例外處理',
 '捕獲過於廣泛的例外或空的catch區塊，在沒有適當處理的情況下吞噬例外。',
 '使用空內容的catch(Exception e) {}，隱藏所有錯誤，或捕獲過於廣泛的例外而沒有特定處理。',
 'medium', 4,
 '["exceptions", "error-handling", "debugging"]',
 '[{"wrong": "catch(Exception e) {}", "correct": "catch(SpecificException e) { logger.error(\\"Error\\", e); }"}]'),

('code_quality_missing_logging', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Missing logging',
 'Inadequate or missing logging, especially for errors, making troubleshooting difficult.',
 'Create catch blocks that don''t log exceptions, or omit logging of important application events and state changes.',
 '缺少日誌記錄',
 '日誌記錄不足或缺失，特別是錯誤日誌，使故障排除變得困難。',
 '建立不記錄例外的catch區塊，或省略重要應用程式事件和狀態變更的日誌記錄。',
 'easy', 3,
 '["logging", "debugging", "monitoring"]',
 '[{"advice": "Add appropriate logging for errors and important events"}]'),

('code_quality_inappropriate_comments', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Inappropriate comments',
 'Comments that are misleading, outdated, or simply restate what the code does without adding value.',
 'Write comments that just repeat the code: ''// increment counter'' for ''counter++'', or leave outdated comments that no longer match the code.',
 '不當的註釋',
 '誤導性、過時或僅重述程式碼功能而不增加價值的註釋。',
 '編寫僅重複程式碼的註釋：對''counter++''寫''// increment counter''，或留下不再符合程式碼的過時註釋。',
 'easy', 2,
 '["comments", "documentation", "clarity"]',
 '[{"wrong": "// increment counter\\ncounter++;", "correct": "// Update user session timeout\\ncounter++;"}]'),

('code_quality_poor_variable_naming', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Poor variable naming',
 'Using unclear, ambiguous, or overly abbreviated variable names that don''t convey their purpose.',
 'Use names like ''x'', ''temp'', or ''data'' that don''t clearly indicate the purpose or content of the variable.',
 '變數命名不佳',
 '使用不清楚、模糊或過度縮寫的變數名稱，不能傳達其用途。',
 '使用如''x''、''temp''或''data''等不能清楚表明變數用途或內容的名稱。',
 'easy', 4,
 '["naming", "readability", "clarity"]',
 '[{"wrong": "int x = getUserCount();", "correct": "int activeUserCount = getUserCount();"}]'),

('code_quality_law_of_demeter_violations', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Law of Demeter violations',
 'Violating the principle that an object should only interact with its immediate neighbors, creating tight coupling.',
 'Create method chains like ''object.getX().getY().doZ()'' instead of having objects only communicate with direct dependencies.',
 '迪米特法則違規',
 '違反物件應只與其直接鄰居互動的原則，造成緊密耦合。',
 '建立如''object.getX().getY().doZ()''的方法鏈，而非讓物件只與直接依賴項通信。',
 'hard', 2,
 '["coupling", "design", "dependencies"]',
 '[{"wrong": "object.getX().getY().doZ()", "correct": "object.performAction()"}]'),

('code_quality_inappropriate_collections', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Not using appropriate collections',
 'Using the wrong collection type for the operations being performed, leading to inefficient code.',
 'Use ArrayList when frequent insertions/deletions are needed (LinkedList would be better), or use List when set operations are required.',
 '未使用適當的集合',
 '對執行的操作使用錯誤的集合型別，導致低效的程式碼。',
 '當需要頻繁插入/刪除時使用ArrayList（LinkedList會更好），或當需要集合操作時使用List。',
 'medium', 3,
 '["collections", "performance", "data-structures"]',
 '[{"advice": "Choose collections based on access patterns: ArrayList for random access, LinkedList for frequent insertions"}]'),

('code_quality_excessive_coupling', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Excessive class coupling',
 'Classes that are too interdependent, making the system fragile and difficult to modify.',
 'Create classes that directly reference many other concrete classes instead of using interfaces, dependency injection, or other decoupling patterns.',
 '過度類耦合',
 '類別過於相互依賴，使系統脆弱且難以修改。',
 '建立直接引用許多其他具體類的類，而非使用介面、依賴注入或其他解耦模式。',
 'hard', 2,
 '["coupling", "design", "interfaces"]',
 '[{"advice": "Use interfaces and dependency injection to reduce coupling"}]'),

('code_quality_not_using_try_with_resources', 
 (SELECT id FROM error_categories WHERE category_code = 'code_quality'),
 'Not using try-with-resources',
 'Not using try-with-resources for AutoCloseable resources, risking resource leaks.',
 'Manually close resources with finally blocks instead of using try-with-resources: ''try { FileReader fr = new FileReader(file); ... } finally { fr.close(); }''',
 '未使用try-with-resources',
 '對AutoCloseable資源未使用try-with-resources，有資源洩漏風險。',
 '使用finally區塊手動關閉資源而非使用try-with-resources：''try { FileReader fr = new FileReader(file); ... } finally { fr.close(); }''',
 'medium', 3,
 '["resources", "memory", "cleanup"]',
 '[{"wrong": "try { FileReader fr = new FileReader(file); } finally { fr.close(); }", "correct": "try (FileReader fr = new FileReader(file)) { }"}]'),

-- Standard Violations
('standard_violation_naming_conventions', 
 (SELECT id FROM error_categories WHERE category_code = 'standard_violation'),
 'Inconsistent naming conventions',
 'Not following standard Java naming conventions for classes, methods, variables, and constants.',
 'Use incorrect naming: ''class myClass'' (lowercase), ''public void GetValue()'' (uppercase method), ''final int maxValue = 100'' (non-uppercase constant).',
 '不一致的命名慣例',
 '未遵循Java類、方法、變數和常數的標準命名慣例。',
 '使用錯誤命名：''class myClass''（小寫），''public void GetValue()''（大寫方法），''final int maxValue = 100''（非大寫常數）。',
 'easy', 4,
 '["naming", "conventions", "style"]',
 '[{"wrong": "class myClass, void GetValue(), final int maxValue", "correct": "class MyClass, void getValue(), final int MAX_VALUE"}]'),

('standard_violation_improper_indentation', 
 (SELECT id FROM error_categories WHERE category_code = 'standard_violation'),
 'Improper indentation',
 'Inconsistent or incorrect code indentation that reduces readability.',
 'Use inconsistent or missing indentation in code blocks, especially nested ones.',
 '縮排不當',
 '縮排不一致或錯誤，降低可讀性。',
 '在程式碼區塊中使用不一致或缺少縮排，特別是巢狀區塊。',
 'easy', 3,
 '["formatting", "indentation", "readability"]',
 '[{"advice": "Use consistent 4-space or 1-tab indentation throughout"}]'),

('standard_violation_unorganized_imports', 
 (SELECT id FROM error_categories WHERE category_code = 'standard_violation'),
 'Unorganized imports',
 'Import statements that are not properly organized or contain unused imports.',
 'Import classes that aren''t used, use wildcard imports unnecessarily, or leave imports unorganized (not grouped by package).',
 '未組織的import',
 'Import語句未適當組織或包含未使用的import。',
 'Import未使用的類，不必要地使用萬用字元import，或保持import未組織（未按套件分組）。',
 'easy', 2,
 '["imports", "organization", "cleanup"]',
 '[{"advice": "Group imports by package and remove unused ones"}]'),

('standard_violation_missing_file_headers', 
 (SELECT id FROM error_categories WHERE category_code = 'standard_violation'),
 'Missing file headers',
 'Source files without standard header comments describing purpose, author, and license information.',
 'Omit file header documentation that includes information about the class purpose, creation date, author, and copyright.',
 '缺少檔案標頭',
 '原始檔沒有描述用途、作者和授權資訊的標準標頭註釋。',
 '省略包含類用途、建立日期、作者和版權資訊的檔案標頭文件。',
 'easy', 1,
 '["documentation", "headers", "standards"]',
 '[{"advice": "Include standard file headers with class purpose and author info"}]'),

('standard_violation_line_length', 
 (SELECT id FROM error_categories WHERE category_code = 'standard_violation'),
 'Line length violations',
 'Lines of code that exceed the recommended maximum length (typically 80-120 characters).',
 'Write extremely long lines of code that require horizontal scrolling instead of breaking them into multiple lines.',
 '行長度違規',
 '超過建議最大長度（通常80-120字符）的程式碼行。',
 '編寫需要水平滾動的極長程式碼行，而非將其拆分為多行。',
 'easy', 2,
 '["formatting", "line-length", "readability"]',
 '[{"advice": "Keep lines under 120 characters, break long statements"}]'),

('standard_violation_inconsistent_braces', 
 (SELECT id FROM error_categories WHERE category_code = 'standard_violation'),
 'Inconsistent brace placement',
 'Placing opening and closing braces inconsistently throughout the codebase.',
 'Mix different brace styles: ''if (condition) {'' and ''if (condition)\n{'' in the same codebase.',
 '括號放置不一致',
 '在整個程式碼庫中不一致地放置開括號和閉括號。',
 '混合不同的括號風格：在同一程式碼庫中使用''if (condition) {''和''if (condition)\n{''。',
 'easy', 2,
 '["formatting", "braces", "consistency"]',
 '[{"advice": "Choose one brace style and use it consistently"}]'),

('standard_violation_unconventional_packages', 
 (SELECT id FROM error_categories WHERE category_code = 'standard_violation'),
 'Unconventional package structure',
 'Not following standard package naming and organization conventions.',
 'Use non-conventional package names like uppercase packages, or place classes in inappropriate packages.',
 '非慣例的套件結構',
 '未遵循標準套件命名和組織慣例。',
 '使用非慣例的套件名稱如大寫套件，或將類放在不適當的套件中。',
 'medium', 1,
 '["packages", "naming", "organization"]',
 '[{"advice": "Use lowercase package names following reverse domain convention"}]'),

('standard_violation_ignoring_warnings', 
 (SELECT id FROM error_categories WHERE category_code = 'standard_violation'),
 'Ignoring code analyzer warnings',
 'Suppressing or ignoring warnings from static code analyzers without proper justification.',
 'Add @SuppressWarnings annotations without comments explaining why the warning is being suppressed.',
 '忽略程式碼分析器警告',
 '在沒有適當理由的情況下抑制或忽略靜態程式碼分析器的警告。',
 '添加@SuppressWarnings註解而沒有註釋解釋為何抑制警告。',
 'medium', 2,
 '["warnings", "analysis", "justification"]',
 '[{"wrong": "@SuppressWarnings(\\"unused\\")", "correct": "@SuppressWarnings(\\"unused\\") // Field used by reflection"}]'),

-- Java Specific Errors
('java_specific_raw_types', 
 (SELECT id FROM error_categories WHERE category_code = 'java_specific'),
 'Raw type usage',
 'Using raw types instead of parameterized types, bypassing generic type safety.',
 'Use ''List list = new ArrayList();'' instead of ''List<String> list = new ArrayList<>();'', losing type safety.',
 '使用原始型別',
 '使用原始型別而非參數化型別，繞過泛型型別安全。',
 '使用''List list = new ArrayList();''而非''List<String> list = new ArrayList<>();''，失去型別安全。',
 'medium', 3,
 '["generics", "type-safety", "collections"]',
 '[{"wrong": "List list = new ArrayList();", "correct": "List<String> list = new ArrayList<>();"}]'),

('java_specific_collection_modification_during_iteration', 
 (SELECT id FROM error_categories WHERE category_code = 'java_specific'),
 'Collection modification during iteration',
 'Modifying a collection while iterating over it with a for-each loop, causing ConcurrentModificationException.',
 'Remove elements from a collection during a for-each loop: ''for(String item : items) { if(condition) items.remove(item); }''',
 '疊代期間修改集合',
 '在使用for-each迴圈疊代集合時修改集合，導致ConcurrentModificationException。',
 '在for-each迴圈期間從集合中移除元素：''for(String item : items) { if(condition) items.remove(item); }''',
 'medium', 4,
 '["collections", "iteration", "concurrent-modification"]',
 '[{"wrong": "for(String item : items) { items.remove(item); }", "correct": "Iterator<String> it = items.iterator(); while(it.hasNext()) { if(condition) it.remove(); }"}]'),

('java_specific_ignoring_interrupted_exception', 
 (SELECT id FROM error_categories WHERE category_code = 'java_specific'),
 'Ignoring InterruptedException',
 'Catching InterruptedException without handling it properly, breaking thread interruption mechanism.',
 'Catch InterruptedException without rethrowing or setting the interrupt flag: ''try { Thread.sleep(1000); } catch (InterruptedException e) { }''',
 '忽略InterruptedException',
 '捕獲InterruptedException而未適當處理，破壞執行緒中斷機制。',
 '捕獲InterruptedException而未重新拋出或設置中斷標誌：''try { Thread.sleep(1000); } catch (InterruptedException e) { }''',
 'hard', 2,
 '["threading", "interruption", "exceptions"]',
 '[{"wrong": "catch (InterruptedException e) {}", "correct": "catch (InterruptedException e) { Thread.currentThread().interrupt(); }"}]'),

('java_specific_boxing_unboxing_overhead', 
 (SELECT id FROM error_categories WHERE category_code = 'java_specific'),
 'Boxing/unboxing overhead',
 'Unnecessary conversions between primitive types and their wrapper classes, impacting performance.',
 'Repeatedly box/unbox in tight loops: ''Integer sum = 0; for(int i=0; i<1000000; i++) { sum += i; }'' instead of using primitive int.',
 '裝箱/拆箱開銷',
 '基本型別和其包裝類之間的不必要轉換，影響性能。',
 '在緊密迴圈中重複裝箱/拆箱：''Integer sum = 0; for(int i=0; i<1000000; i++) { sum += i; }''而非使用基本型別int。',
 'medium', 2,
 '["performance", "primitives", "boxing"]',
 '[{"wrong": "Integer sum = 0; for(int i=0; i<1000000; i++) { sum += i; }", "correct": "int sum = 0; for(int i=0; i<1000000; i++) { sum += i; }"}]'),

('java_specific_misuse_of_finalize', 
 (SELECT id FROM error_categories WHERE category_code = 'java_specific'),
 'Misuse of finalize()',
 'Overriding finalize() for resource management, which is unreliable due to garbage collection unpredictability.',
 'Override finalize() to close resources instead of using try-with-resources or explicit close() calls.',
 'finalize()的誤用',
 '覆寫finalize()進行資源管理，由於垃圾收集的不可預測性而不可靠。',
 '覆寫finalize()來關閉資源而非使用try-with-resources或明確的close()呼叫。',
 'hard', 1,
 '["finalize", "resources", "garbage-collection"]',
 '[{"wrong": "protected void finalize() { resource.close(); }", "correct": "try (Resource resource = new Resource()) { }"}]'),

('java_specific_checked_exception_overuse', 
 (SELECT id FROM error_categories WHERE category_code = 'java_specific'),
 'Checked exception overuse',
 'Declaring methods to throw checked exceptions that could be handled locally or converted to unchecked exceptions.',
 'Propagate checked exceptions up the call stack when they could be handled or wrapped locally.',
 '已檢查例外的過度使用',
 '宣告方法拋出可以在本地處理或轉換為未檢查例外的已檢查例外。',
 '當可以在本地處理或包裝時，將已檢查例外向上傳播到呼叫堆疊。',
 'medium', 2,
 '["exceptions", "checked", "design"]',
 '[{"advice": "Use checked exceptions sparingly, prefer unchecked for programming errors"}]'),

('java_specific_not_using_diamond_operator', 
 (SELECT id FROM error_categories WHERE category_code = 'java_specific'),
 'Not using diamond operator',
 'Not using the diamond operator (<>) for generic instance creation, making code more verbose.',
 'Use ''Map<String, List<Integer>> map = new HashMap<String, List<Integer>>();'' instead of ''Map<String, List<Integer>> map = new HashMap<>();''',
 '未使用菱形運算子',
 '在泛型實例建立時未使用菱形運算子（<>），使程式碼更冗長。',
 '使用''Map<String, List<Integer>> map = new HashMap<String, List<Integer>>();''而非''Map<String, List<Integer>> map = new HashMap<>();''',
 'easy', 2,
 '["generics", "diamond", "verbosity"]',
 '[{"wrong": "Map<String, List<Integer>> map = new HashMap<String, List<Integer>>();", "correct": "Map<String, List<Integer>> map = new HashMap<>();"}]'),

('java_specific_missing_override_annotation', 
 (SELECT id FROM error_categories WHERE category_code = 'java_specific'),
 'Not using @Override annotation',
 'Omitting @Override annotation when overriding methods, losing compiler validation.',
 'Override methods from superclasses or interfaces without using the @Override annotation.',
 '未使用@Override註解',
 '覆寫方法時省略@Override註解，失去編譯器驗證。',
 '覆寫超類或介面的方法而未使用@Override註解。',
 'easy', 3,
 '["annotations", "override", "validation"]',
 '[{"wrong": "public String toString() { return name; }", "correct": "@Override public String toString() { return name; }"}]');

-- Insert badges
INSERT INTO badges (badge_id, name_en, name_zh, description_en, description_zh, icon, category, difficulty, points, unlock_criteria) VALUES
('badge_first_review', 'First Review', '第一次審查', 'Complete your first code review', '完成你的第一次代碼審查', '🎯', 'milestone', 'easy', 10, '{"reviews_completed": 1}'),
('badge_syntax_master', 'Syntax Master', '語法大師', 'Identify 10 syntax errors correctly', '正確識別10個語法錯誤', '📝', 'expertise', 'medium', 25, '{"syntax_errors_found": 10}'),
('badge_logic_detective', 'Logic Detective', '邏輯偵探', 'Find 5 logical errors in code', '在代碼中找到5個邏輯錯誤', '🔍', 'expertise', 'medium', 30, '{"logical_errors_found": 5}'),
('badge_quality_advocate', 'Quality Advocate', '品質倡導者', 'Identify 15 code quality issues', '識別15個代碼品質問題', '⭐', 'expertise', 'hard', 40, '{"quality_issues_found": 15}'),
('badge_perfectionist', 'Perfectionist', '完美主義者', 'Achieve 100% accuracy in 5 reviews', '在5次審查中達到100%準確率', '💎', 'achievement', 'hard', 50, '{"perfect_reviews": 5}'),
('badge_java_ninja', 'Java Ninja', 'Java忍者', 'Master all Java-specific error categories', '掌握所有Java特定錯誤類別', '🥷', 'mastery', 'hard', 100, '{"java_specific_mastery": 100}'),
('badge_error_hunter', 'Error Hunter', '錯誤獵人', 'Find 50 errors across all categories', '在所有類別中找到50個錯誤', '🏹', 'volume', 'hard', 75, '{"total_errors_found": 50}');

-- Verification
SELECT 'Data insertion completed successfully!' as Status;
SELECT 
    (SELECT COUNT(*) FROM error_categories) as Categories,
    (SELECT COUNT(*) FROM java_errors) as Errors,
    (SELECT COUNT(*) FROM badges) as Badges;
